name: Test Workflow

on:
  workflow_dispatch:
    inputs:
      dict_param:
        description: 'JSON dictionary parameter'
        required: true
        default: '{"environment": "development", "test_case_method": "ec2-al2", "email_id": "", "dynamic_variable_path": "" }' # email_id is optional
      email_id:
        description: 'Email ID for notifications (optional)'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  PYTHON_VERSION: "3.12"
  GITHUB_RUN_ID: ${{ github.run_id }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_WORKFLOW: ${{ github.workflow }}
  GITHUB_JOB: ${{ github.job }}

jobs:
  Instance:
    runs-on: ubuntu-latest
    environment: ${{ fromJson(github.event.inputs.dict_param).environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Parse Input Parameters and Set Environment Variables
      id: parse_input
      run: |
        echo "Parsing JSON dictionary input..."
        INPUT_DICT='${{ github.event.inputs.dict_param }}'

        # Parse JSON with jq
        environment=$(echo "$INPUT_DICT" | jq -r '.environment')
        test_case_method=$(echo "$INPUT_DICT" | jq -r '.test_case_method')
        email_id_param=$(echo "$INPUT_DICT" | jq -r '.email_id // ""')
        dynamic_variable_path=$(echo "$INPUT_DICT" | jq -r '.dynamic_variable_path // ""')

        # Fallback to 'workflow_dispatch' email input
        email_id="${{ github.event.inputs.email_id }}"
        if [[ -z "$email_id" ]]; then
          email_id="$email_id_param"
        fi

        # Determine dynamic variable path if not explicitly provided
        case "$test_case_method" in
          ec2-al2)
            dynamic_variable_path="./catalog-ui/tests/aws-ec2-al2.json"
            ;;
          ec2-win)
            dynamic_variable_path="./catalog-ui/tests/aws-ec2-win.json"
            ;;
          api-api1)
            dynamic_variable_path="./catalog-ui/tests/api-api1.json"
            ;;
          api-api2)
            dynamic_variable_path="./catalog-ui/tests/api-api2.json"
            ;;
          *)
            echo "Error: Unsupported test case method $test_case_method"
            exit 1
            ;;
        esac

        echo "Environment: $environment"
        echo "Test Case Method: $test_case_method"
        echo "Email ID: $email_id"
        echo "Dynamic Variable Path: $dynamic_variable_path"

        # Validate environment
        valid_envs=("development" "test" "production")
        if [[ ! " ${valid_envs[@]} " =~ " ${environment} " ]]; then
          echo "Error: Invalid environment. Must be development, test, or production."
          exit 1
        fi

        # Export parsed values as environment variables
        echo "EMAIL_ID=$email_id" >> $GITHUB_ENV
        echo "TEST_CASE_METHOD=$test_case_method" >> $GITHUB_ENV
        echo "DYNAMIC_VARIABLE_PATH=$dynamic_variable_path" >> $GITHUB_ENV

    - name: Set Up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Dependencies Based on Test Case Method
      run: |
        if [[ "$TEST_CASE_METHOD" == "ec2-al2" || "$TEST_CASE_METHOD" == "ec2-win" ]]; then
          pip install -r ec2-requirements.txt
        else
          pip install -r api-requirements.txt
        fi

    - name: Echo Test Case Command
      run: |
        echo "Determining the test case command for $TEST_CASE_METHOD"
        case "$TEST_CASE_METHOD" in
          ec2-al2)
            COMMAND="python -m robot --outputdir Reports --listener allure_robotframework:allure-results $DYNAMIC_VARIABLE_PATH"
            ;;
          ec2-win)
            COMMAND="python -m robot --outputdir Reports --listener allure_robotframework:allure-results $DYNAMIC_VARIABLE_PATH"
            ;;
          api-*)
            COMMAND="python -m robot --outputdir Reports --listener allure_robotframework:allure-results $DYNAMIC_VARIABLE_PATH"
            ;;
          *)
            echo "Error: Unsupported test case method."
            exit 1
            ;;
        esac
        echo "Command to execute: $COMMAND"
    
